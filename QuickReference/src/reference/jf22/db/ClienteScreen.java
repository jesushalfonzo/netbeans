/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package reference.jf22.db;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author curso4
 */
public class ClienteScreen extends javax.swing.JFrame {

    private boolean validSize = false;
    private boolean exist = true;
    DbSqlHelper db = new DbSqlHelper("jdbc:derby://localhost:1527/curso", "curso", "12345678");
    ClienteManager manager = new ClienteManager(db);
    ClienteBean cliente = new ClienteBean();

    /**
     * Creates new form ClienteScreen
     */
    public ClienteScreen() {
        initComponents();
        InnerFocus innf = new InnerFocus();
        jtCedula.addFocusListener(innf);
        jtNombre.addFocusListener(innf);
        jtApellido.addFocusListener(innf);
        jtIdCliente.addFocusListener(innf);
        jbSave.addActionListener(new InnerListeter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlIdCliente = new javax.swing.JLabel();
        jlNombre = new javax.swing.JLabel();
        jlApellido = new javax.swing.JLabel();
        jlCedula = new javax.swing.JLabel();
        jtIdCliente = new javax.swing.JTextField();
        jtNombre = new javax.swing.JTextField();
        jtApellido = new javax.swing.JTextField();
        jtCedula = new javax.swing.JTextField();
        jbSave = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jlIdCliente.setText("idCliente");

        jlNombre.setText("Nombre");

        jlApellido.setText("Apellido");

        jlCedula.setText("cedula");

        jbSave.setText("Guardar");

        jbDelete.setText("Borrar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlApellido)
                                .addGap(18, 18, 18)
                                .addComponent(jtApellido))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlNombre)
                                    .addComponent(jlIdCliente))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jlCedula)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jtNombre)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlIdCliente)
                            .addComponent(jtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlCedula))
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlNombre)
                    .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlApellido)
                    .addComponent(jtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbDelete)
                    .addComponent(jbSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteScreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbSave;
    private javax.swing.JLabel jlApellido;
    private javax.swing.JLabel jlCedula;
    private javax.swing.JLabel jlIdCliente;
    private javax.swing.JLabel jlNombre;
    private javax.swing.JTextField jtApellido;
    private javax.swing.JTextField jtCedula;
    private javax.swing.JTextField jtIdCliente;
    private javax.swing.JTextField jtNombre;
    // End of variables declaration//GEN-END:variables

    private class InnerListeter implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            try {
                if (validSize) {
                    ScreenDataToObject();
                    if (exist) {
                        manager.update(cliente);
                        JOptionPane.showMessageDialog(null, "Actualizado con exito!!!");
                    } else {
                        manager.save(cliente);
                        JOptionPane.showMessageDialog(null, "Guardado con exito!!!");
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ClienteScreen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(ClienteScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class InnerFocus implements FocusListener {

        @Override
        public void focusGained(FocusEvent fe) {
        }

        @Override
        public void focusLost(FocusEvent fe) {
            Object o = fe.getSource();
            if (o instanceof JTextField) {
                if (o == jtCedula) {
                    validSize = ClienteBean.Cliente_size.cedula.isValidLength(jtCedula.getText().trim().length());
                    validJtextSize(jlCedula, validSize);
                } else if (o == jtNombre) {
                    validSize = ClienteBean.Cliente_size.nombre.isValidLength(jtNombre.getText().trim().length());
                    validJtextSize(jlNombre, validSize);
                } else if (o == jtApellido) {
                    validSize = ClienteBean.Cliente_size.apellido.isValidLength(jtApellido.getText().trim().length());
                    validJtextSize(jlApellido, validSize);
                } else if (o == jtIdCliente) {
                    try {
                        Integer.parseInt(jtIdCliente.getText().trim());
                    } catch (NumberFormatException nfe) {
                        validSize = false;
                        validJtextSize(jlIdCliente, validSize);
                        return;
                    }
                    cliente.setIdCliente(Integer.parseInt(jtIdCliente.getText().trim()));
                    exist = false;
                    try {
                        ClienteBean c = manager.selectBeanById(cliente);
                        if (c != null) {
                            exist = true;
                            ObjectDataToScreen(c);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(ClienteScreen.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(ClienteScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

        private void validJtextSize(JLabel jl, boolean valid) {
            if (!valid) {
                jl.setForeground(Color.red);
                validSize = false;
            } else {
                jl.setForeground(Color.black);
                validSize = true;
            }
        }
    }

    private void ScreenDataToObject() {
        cliente.setNombre(jtNombre.getText());
        cliente.setApellido(jtApellido.getText());
        cliente.setCedula(jtCedula.getText());
    }

    private void ObjectDataToScreen(ClienteBean cliente) {
        jtNombre.setText(cliente.getNombre());
        jtApellido.setText(cliente.getApellido());
        jtCedula.setText(cliente.getCedula());
    }
}
